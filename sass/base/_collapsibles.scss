// Collapsibles (drawers)
@import 'base/grid';
@import 'base/colors';

@mixin collapsible-icon {
  position: absolute;
  top: 2px;
  left: 8px;
  color: $gray;
  font-size: $base-font-size;
}

// Default
.l-collapsibles {
	@include clear();

  h3,
  .drawer-title {
    margin-bottom: 0;
  }

  > li {
    margin: 0;
  }

  .l-collapsible > * {
    position: relative;
  }

  .l-collapsible.collapsed + *,
  .l-collapsible[data-state="is-closed"] + * {
    display: none;
  }

  .l-collapsible > *::before {
    @extend .icon-drawer-open;
    @include collapsible-icon();
    content: "\e013";
  }

  .l-collapsible.collapsed > *::before,
  .l-collapsible[data-state="is-closed"] > *::before {
    @extend .icon-drawer-close;
    @include collapsible-icon();
    content: "\e012";
  }
}

.t-collapsibles {
  .t-collapsible {
    text-decoration: none;
    color: $digitalblack;

    h2,
    h3,
    .drawer-title {
      color: $digitalblack;
    }

    &:hover {
      text-decoration: none;
    }
    &:focus {
      outline: none;
      border-top: 1px solid rgba(19, 79, 143, 0.5);
      border-bottom: 1px solid rgba(19, 79, 143, 0.6);
      @include box-shadow(0 0 3px rgba(19, 79, 143, 0.8));
    }

    &.non-collapsible {
      > * {
        margin-left: 0;

        &::before {
          content: '';
        }
      }
    }
  }
}

.t-collapsibles.t-white {
  .l-collapsible > *::before {
    color: $gray;
  }

  .l-collapsible.collapsed > *::before,
  .l-collapsible[data-state="is-closed"] > *::before {
    color: $gray;
  }

  .t-collapsible {
    h2,
    h3,
    .drawer-title {
      color: $lightestgray;
    }
  }
}

// Has to be a mixin to support use within breakpoints (as opposed to extend)
@mixin collapsible-narrow() {
  $drawer-left-padding: 28px;

  @include bleed();
  padding: 0;

  .l-container {
    padding-left: 0;
    padding-right: 0;
  }

  hr {
    display: none;
  }

  h2,
  h3,
  .drawer-title {
    padding: 0 0 0 10px;
  }

  .l-collapsible {
    display: block;
    padding: 1em 0.5em 0.5em 0;
    border-top: 1px solid $lightgray;


    & > * {
      margin-left: 0;
      padding-left: $drawer-left-padding;
    }
  }

  > li {
    padding: 9px 0.5em 9px 2em;
    border-top: 1px solid $lightgray;
  }

  .l-collapsible + .drawer {
    padding-left: $drawer-left-padding;
    padding-right: $grid-padding;
  }

  > li {
    font-size: $type-S;
    background-color: $lightestgray;
  }

  .t-collapsible {
    h3,
    h4,
    .drawer-title {
      @include semibold();
    }
  }
}

// The default
.l-collapsibles {
  @include collapsible-narrow();
}

@mixin expand-collapsible() {
  margin: 0;
  padding: 0 $grid-padding;

  .l-collapsible {
    border-top: 0;
  }

  .l-collapsible > * {
    margin-left: 0;
    padding-left: 0;
  }
  .l-collapsible.collapsed + *,
  .l-collapsible[data-state="is-closed"] + * {
    display: block;
  }
  .l-collapsible > *:before,
  .l-collapsible.collapsed > *:before,
  .l-collapsible[data-state="is-closed"] > *:before {
    content: '';
  }
  .l-collapsible + .drawer {
    padding-left: 0;
    padding-right: 0;
  }


  hr {
    border-color: $lightgray;
    margin-bottom: 0.75em;
  }

  .column {
    @include span-columns(3);
    margin-bottom: 0.75em;
  }
  .column.second {
    @include span-columns(3 omega);
  }

  h3 {
    margin-bottom: 6px;
  }

  > li {
    line-height: 14px;
    margin-bottom: 10px;
  }
}

// New data-object="drawer" version
[data-object="drawer"] {
  .drawer-toggle {
    display: block;
    position: relative;
    padding-left: 22px;

    &:before {
      @include icon-font-icon();
      content: "\e012";
      position: absolute;
      top: 2px;
      left: 0;
      font-size: $base-font-size;
    }

    &:hover,
    &:active {
      cursor: pointer;
    }

    // Default state == is-closed
    & + * {
      // Some big number. It shouldn't matter.
      // If you need to override just make your selector more specific
      max-height: 0;
      height: 0;
      overflow: hidden;
      @include transition(max-height 0.35s ease-in-out);
      @include translate3d(0,0,0);
    }
  }

  &[data-state="is-open"] {
    .drawer-toggle:before {
      content: "\e013";
    }
    .drawer-toggle + * {
      max-height: 10000px;
      height: auto;
    }
  }

  .t-drawer-toggle {
    text-decoration: none;
    color: $digitalblack;

    &:before {
      color: $darkestgray;
    }

    &:hover {
      text-decoration: none;
    }
    &:focus {
      outline: none;
      border-top: 1px solid rgba(19, 79, 143, 0.5);
      border-bottom: 1px solid rgba(19, 79, 143, 0.6);
      @include box-shadow(0 0 3px rgba(19, 79, 143, 0.8));
    }
  }

  .t-drawer-face {
    padding-top: 10px;
    padding-bottom: 10px;
    border-top: 1px solid $lightgray;

    &:before {
      padding-top: 10px;
      padding-bottom: 10px;
    }

  }

  .t-drawer {
    margin-left: 25px;
  }
}

@mixin expand-drawer() {
  [data-object="drawer"] {
    .drawer-toggle {
      padding-left: 0;

      &:before {
        content: "";
      }
    }

    &[data-state="is-closed"] {
      .drawer-toggle + * {
        max-height: 10000px;
      }
    }
  }
}
